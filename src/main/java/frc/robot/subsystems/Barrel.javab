// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.MotorFeedbackSensor;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxAnalogSensor;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.SparkMaxRelativeEncoder;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxAnalogSensor.Mode;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class Barrel extends SubsystemBase {
    private Drivetrain drivetrain;
    private Vision vision;
    private Climbers climbers;

    private CANSparkMax bottomStage = new CANSparkMax(10, MotorType.kBrushed);
    private CANSparkMax topStage = new CANSparkMax(11, MotorType.kBrushless);

    private RelativeEncoder topStageEncoder = topStage.getEncoder();
    private DigitalInput bottomSensor = new DigitalInput(1);
    private DigitalInput topSensor = new DigitalInput(2);

    private CANSparkMax screw = new CANSparkMax(16, MotorType.kBrushless);
    private SparkMaxPIDController screwPID = screw.getPIDController();
    private SparkMaxAnalogSensor screwEncoder = screw.getAnalog(Mode.kAbsolute);

    private CANSparkMax topWheel = new CANSparkMax(12, MotorType.kBrushless);
    private SparkMaxPIDController topWheelPID = topWheel.getPIDController();
    private RelativeEncoder topWheelEncoder = topWheel.getEncoder();

    private CANSparkMax bottomWheel = new CANSparkMax(13, MotorType.kBrushless);
    private SparkMaxPIDController bottomWheelPID = bottomWheel.getPIDController();
    private RelativeEncoder bottomWheelEncoder = bottomWheel.getEncoder();


    public Barrel() {
        bottomStage.enableVoltageCompensation(12);
        bottomStage.setIdleMode(IdleMode.kBrake);
        topStage.enableVoltageCompensation(12);
        topStage.setIdleMode(IdleMode.kBrake);

        screw.enableVoltageCompensation(12);
        screw.setIdleMode(IdleMode.kBrake);
        screwPID.setFeedbackDevice(screwEncoder);
        screwPID.setP(0);
        screwPID.setI(0);
        screwEncoder.setPositionConversionFactor(0.5);

        configureFlywheelMotor(topWheel);
        configureFlywheelMotor(bottomWheel);



    }

    public void setOtherSubsystems(Drivetrain drivetrain, Climbers climbers, Vision vision) {
        this.drivetrain = drivetrain;
        this.vision = vision;
        this.climbers = climbers;
    }

    long bottomStopIntake = 0;
    long bottomStopHandoff = 0;
    long bottomStopFinalShift = 0;

    long bottomHandoffDuration = 500;
    long bottomHandoffDeadzone = bottomHandoffDuration - 200;
    long bottomShiftDuration = 100;

    long topStopIntake = 0;
    long topStopHandoff = 0;
    long topStopFinalShift = 0;

    long topIntakeDuration = 500;
    long topHandoffDuration = 500;
    long topHandoffDeadzone = topHandoffDuration - 200;
    long topShiftDuration = 100;

    boolean topBallAvailable = false;

    @Override
    public void periodic() {
        updateIndexer();
        updateTilt();
        updateShooter();

    }

    private void updateIndexer() {
        boolean bottomBall = bottomSensor.get();
        boolean topBall = topSensor.get();
        double topVelo = topStageEncoder.getVelocity();
        boolean topIsOpen = (!topBall) && topVelo<5; // we can move a ball into top if there is not a ball there and it is not spinning fast
        long now = System.currentTimeMillis();
        boolean runBottom = false;
        double desTopSpeed = 0;

        if (topStopIntake > now) {
            desTopSpeed = 1;
            long timeLeft = topStopHandoff - now;
            if(timeLeft < topHandoffDeadzone && topBall){
                topStopIntake = 0;
                topStopFinalShift = now+topShiftDuration;
            }
        }
        if (topStopFinalShift > now) {
            desTopSpeed = 1;
        }
        if (topStopHandoff > now) {
            desTopSpeed = 9;
        }

        if (bottomStopHandoff > now) {
            runBottom = true;
        } else {
            if(bottomBall && topIsOpen){
                bottomStopHandoff = now + bottomHandoffDuration;
                topStopIntake = now + topIntakeDuration;
                runBottom = true;
            }
        }
        if (bottomStopIntake > now) {
            runBottom = true;
            long timeLeft = bottomStopHandoff - now;

            if (timeLeft < bottomHandoffDeadzone && bottomBall) {
                bottomStopIntake = 0;
                bottomStopFinalShift = now + bottomShiftDuration;
            }
        }
        if (bottomStopFinalShift > now) {
            runBottom = true;
        }


        if (runBottom) {
            bottomStage.set(1);
        }else{
            bottomStage.set(0);
        }
        topStage.set(desTopSpeed);
        topBallAvailable = desTopSpeed == 0 && topBall;
        SmartDashboard.putBoolean("bottomBall", bottomBall);
        SmartDashboard.putBoolean("topBall", topBall);

    }

    public void setIntake(boolean running){
        if(running){
            bottomStopIntake = System.currentTimeMillis() + 100;
        }else{
            bottomStopIntake = 0;

        }
    }
    /**
     * Is there a ball in the top stage that is still and loaded to fire?
     * @return
     */
    public boolean ballAvailableToShoot(){
        return topBallAvailable;
    }
    /**
     * Move the top stage so the ball enters the flywheels. Will do nothing if there is not ballAvailableToShoot()
     */
    public void sendBallToShooter(){
        if(ballAvailableToShoot()){
            topStopHandoff = System.currentTimeMillis()+topHandoffDuration;
        }else{

        }
    }

    //tilt stuff
    private final double angToRotConvert = 360;
    private void updateTilt() {

    }
    /**
     *
     * @param angle the angle in degrees, where 90 would be straight up.
     * @return
     */
    public void setTiltAngle(double angle){
        screwPID.setReference(angle/angToRotConvert, ControlType.kPosition);
    }
    /**
     *
     * @return the current measured barrel angle in degrees, where 90 would be straight up.
     */
    public double getTiltAngle(){
        return screwEncoder.getPosition()*angToRotConvert;
    }

    //Shooter stuff
    private void updateShooter() {
        double velo = topWheelEncoder.getVelocity();
        SmartDashboard.putNumber("topShooterVelo", velo);
    }
    /**
     * Configures the coasting, PID gains, etc for one of the flywheels
     */
    private void configureFlywheelMotor(CANSparkMax motor){
        SparkMaxPIDController pid = motor.getPIDController();
        motor.enableVoltageCompensation(12);
        motor.setIdleMode(IdleMode.kCoast);
        pid.setP(0);
        pid.setI(0);
        pid.setD(0);
        pid.setFF(0);

    }
    /**
     * Set the target rpm of the top and bottom flywheels. Both must be positive.
     */
    public void setFlywheels(double topRPM, double bottomRPM){
        if(topRPM<0 || bottomRPM<0){
            System.out.println("ERROR: Tried to set shooter RPM to negative");
            return;
        }
        topWheelPID.setReference(topRPM, CANSparkMax.ControlType.kVelocity);
        bottomWheelPID.setReference(bottomRPM, CANSparkMax.ControlType.kVelocity);
    }


    private double getShootingTopSpeed(double meters){
        double x = meters;

        double result = 431.1797752808984*x + -2201.9662921348286; //CURVE:TSPEED,04:49,03/28
        return result;
    }
    /**
     *
     * @param meters from target's center
     * @return
     */
    private double getShootingAngle(double meters){

    }


}