// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import java.util.List;

import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Util;
import frc.robot.commands.paths.CommandPathPiece;
import frc.robot.subsystems.Barrel;
import frc.robot.subsystems.Drivetrain;
import frc.robot.subsystems.PixyObject;

/**
 *
 */
public class KeepMovingTime extends CommandBase implements CommandPathPiece{


    long timeout = 0;
    long timeToStop = 0;
    Drivetrain drivetrain;
    ChassisSpeeds speeds;
    /**
     * It will go field-oriented
     * @param drivetrain
     * @param xSpeed
     * @param ySpeed
     */
    public KeepMovingTime(Drivetrain drivetrain, ChassisSpeeds globalSpeeds, long timeout) {

        this.speeds = globalSpeeds;
        this.timeout=timeout;
        this.drivetrain= drivetrain;
        addRequirements(drivetrain);

    }
    
    @Override
    public void initialize() {
        timeToStop = System.currentTimeMillis()+timeout;

    }


    
    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {
        ChassisSpeeds localSpeeds = Util.rotateSpeeds(speeds, drivetrain.getGyroRadians());

        drivetrain.limitDrive(localSpeeds, 0);
        

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {

        return System.currentTimeMillis()>timeToStop;
    }

    
    @Override
    public double getRequestedStartSpeed() {
        return 1;
    }

}
